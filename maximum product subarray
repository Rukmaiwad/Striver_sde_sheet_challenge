*************maximum product subarray************
from os import *
from sys import *
from collections import *
from math import *

def maximumProduct(arr, n):
    max_prod=[0]*n
    min_prod=[0]*n
    max_prod[0]=arr[0]
    min_prod[0]=arr[0]
    res=arr[0]
    for i in range(1,n):
        if arr[i]>=0:
            max_prod[i]=max(arr[i],max_prod[i-1]*arr[i])
            min_prod[i]=min(arr[i],min_prod[i-1]*arr[i])
        else:
            max_prod[i]=max(arr[i],min_prod[i-1]*arr[i])
            min_prod[i]=min(arr[i],max_prod[i-1]*arr[i])
        res=max(res,max_prod[i])
    return res
    pass
*****************java code*****************
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {
	public static int maximumProduct(ArrayList<Integer> arr, int n) {
		int prefix=1;
		int suffix=1;
		int maxi=-100000;
		for(int i=0;i<n;i++){
			if(prefix==0){
				prefix=1;
			}
			if(suffix==0){
				suffix=1;
			}
			prefix=prefix*arr.get(i);
			suffix=suffix*arr.get(n-i-1);
			maxi=Math.max(maxi,Math.max(suffix,prefix));
		}
		return maxi;
	}
}
**************Leetcode*****152.maximum product subarray****************
class Solution {
    public int maxProduct(int[] nums) {
        
        int prefix=1;
        int suffix=1;
        int n=nums.length;
        int maxi=-100000;
        for (int i=0;i<nums.length;i++){
            if (prefix==0){
                prefix=1;
            }
            if(suffix==0){
                suffix=1;
            }
            prefix=prefix*nums[i];
            suffix=suffix*nums[n-i-1];
            maxi=Math.max(maxi,Math.max(prefix,suffix));
        }
        return maxi;
    }
}
***python******
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        max_prod=[0]*len(nums)
        min_prod=[0]*len(nums)
        max_prod[0]=nums[0]
        min_prod[0]=nums[0]
        res=nums[0]
        for i in range(1,len(nums)):
            if nums[i]>=0:
                max_prod[i]=max(nums[i],max_prod[i-1]*nums[i])
                min_prod[i]=min(nums[i],min_prod[i-1]*nums[i])
            else:
                max_prod[i]=max(nums[i],min_prod[i-1]*nums[i])
                min_prod[i]=min(nums[i],max_prod[i-1]*nums[i])
            res=max(res,max_prod[i])
        return res
        
            
      
